.macro print_S (%x)
	li $v0 4
	la $a0 %x
	syscall
.end_macro
.macro print_I (%y)
	li $v0 1
	move $a0 %y
	syscall
.end_macro

.data
Mensaje1:.asciiz "Bienvenido a la Calculadora de Programador\n"
Mensaje2:.asciiz "Elija el sistema numerico que introducira: \n 1)Binario \n 2)Decimal Empaquetado\n 3)Base 10 \n 4)Octal \n 5)Hexadecimal\n"
Mensaje3:.asciiz "\n El sistema de numeracion al cual convertir: \n 1)Binario \n 2)Decimal Empaquetado\n 3)Base 10 \n 4)Octal \n 5)Hexadecimal\n"
Mensaje4:.asciiz "\n Numero en base 10 introducido: "
SOS: .asciiz "Pase por aqui \n"

numeroCadena:.space 32
numeroEmpaquetado: .space 32
signo: .space 2

.text
li $s0 0
print_S(Mensaje1)

menu: ############################################################################################

print_S(Mensaje2)

# El usurio elijira entre :
# 1) Binario
# 2) Decimal empaquetada
# 3) Base 10
# 4) Octal
# 5) Hexadecimal

li $v0, 5
syscall

beq $v0 1 Binario_a2
beq $v0 2 DecimalEmpaquetado
#beq $v0 3 Base10
#beq 4, $v0 Octal
#beq 5, $v0 Hexadecimal
blt $v0 1 menu
bgt $v0 5 menu

li $t0 0 # es nuestra variable de iteracion
li $t3 0

# $t1 guardar cada uno de los caracteres leidos
# $t2 guardaremos la representacion numerica de dichos caracteres

Binario_a2:#############################################################################################
#00000000000000000000000000001111
	li $v0 8
	la $a0 numeroCadena
	li $a1 33
	syscall

	GuardarBits:
		#print_S(numeroCadena)
		li $t2 0
		li $t9 32
		lb $t1 numeroCadena($t0) 	# cargo el valor ascii de 0 o 1
		beq $t1 0xA finGuardarBits	# $t1 = null finalizar
		beq $t1 0x0 finGuardarBits	
		subi $t2 $t1 0x30 		# $t2 con el bit especifico del caracter
		addi $t0 $t0 1			# $t0 contador + 1
		sub $t9 $t9 $t0        		# $t9 = t9 - el contador, sera un iterador de posiciones en memoria
		sllv $t2 $t2 $t9		# $t2 = t2 empujado a la izquierda por el iterador
		or $t3 $t3 $t2			#guardo en memoria cada uno de los bits
		b GuardarBits
		
	finGuardarBits:
		print_S(Mensaje4)
		print_I($t3)
		li $t0 0
		move $t0 $t3
		b menu2
		
DecimalEmpaquetado: ##################################################################
#00000000000000000000000101011101
	li $v0 8
	la $a0 numeroCadena
	li $a1 33
	syscall
	li $t0 28 # recorrido de izquierda a derecha de la cadena
	li $t8 1  # exponente 
	li $t7 0  # contador
	li $t5 1  # valor del signo
	li $s4 4  # constante 4
	li $s5 10  # exponente del 10

	
	GuardarEmpaquetado:
		#print_S(numeroCadena)
		li $t2 0
		li $t9 32
		lb $t1 numeroCadena($t0) 	# cargo el valor ascii de 0 o 1
		beq $t1 0xA finGuardarEmpaquetado 	# $t1 = null finalizar
		beq $t1 0x0 finGuardarEmpaquetado	
		bltz $t0 finGuardarEmpaquetado
		subi $t2 $t1 0x30 	# $t2 con el bit especifico del caracter
		addi $t0 $t0 1		# $t0 contador de 28 a 32
		addi $t7 $t7 1       	# $t7 contador de 1 a 4
		sub $t9 $t9 $t7        	# $t9 = 32 - el contador t7 para recorrer 4 espacios
		sllv $t2 $t2 $t9	# $t2 = t2 empujado a la izquierda por el iterador t9 quedando en 28
		or $t3 $t3 $t2		#guardo en memoria cada uno de los bits
		beq $t9 28 valor	
		b GuardarEmpaquetado
		
	valor:
		addi $t0 $t0 -8 	# paso a las siguientes 4 posiciones mas a la izquierdas
		li $t7 0		# reseteo t7 a 0
		li $t4 0		# $t4 guardar el valor final
		srlv $t3 $t3 $t9 	# los 4 bits mas a la izquierda los paso a la dereche
		or $t4 $t4 $t3		# $t4 tendra el valor especifico del nibble obtenido de la cadena
		beq $t4 13 negativo
		beq $t4 12 GuardarEmpaquetado
		mul $t4 $t4 $t8     	# $t4 = valor obtenido * $t8
		add $t6 $t6 $t4        # $t6 es sumar el valor obtenido
		mul $t8 $t8 $s5		# $t8 es un exponente 10^n
		b GuardarEmpaquetado
	negativo:
		li $t5 -1
		#sb $t5 numeroDecimal($t7)
		b GuardarEmpaquetado
		
	finGuardarEmpaquetado:
		mul $t6 $t6 $t5
		print_S(Mensaje4)
		print_I($t6)
		li $t0 0
		move $t0 $t6
		b menu2

#Base10  #################################################################################################


#Octal   #################################################################################################


#Hexadecimal	#########################################################################################

menu2:	################################################################################################
	print_S(Mensaje3)	
	li $v0 5
	syscall
	
	beq $v0 1 BinA2
	beq $v0 2 DecEmp
#	beq $v0 3 Bas10
#	beq 4, $v0 Oct
#	beq 5, $v0 Hex
#	blt $v0 1 menu2
#	bgt $v0 5 menu2
	li $v0 10
	syscall

BinA2: #############################################################################################
	li $v0 35
	move $a0 $t0
	syscall
	li $v0 10
	syscall
	
DecEmp: #############################################################################################
	li $t4,0x0c
   	bgez $t0,siga
     	abs $t0,$t0
     	li $t4,0x0d
	siga:  
		li $t5,0 	#registro donde quedarán 7 decimales + el signo
      		li $t1,0 	#contador de iteraciones, debe llegar hasta 7
       		li $t2,0 	# desplazamiento variable del shift left logical )se incrementa de 4 en 4=
	registroEmpaquetado: 
		div $t0,$t0,10
       		mfhi $t3 	# residuo de la división va a $t3
      		sllv $t3,$t3,$t2
 		or $t5,$t5,$t3
 		addi $t1,$t1,1
 		addi $t2,$t2,4
       		blt  $t1,7,registroEmpaquetado
       		sll $t5,$t5,4
       		or $t5,$t5,$t4
       		b imprimir
       	imprimir:
       		print_I($t5)
       		
#Bas10:########################################################################################################



#Oct: #########################################################################################################




#Hex: ##############################################################################
	
	
	
